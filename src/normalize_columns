import pandas as pd
import logging

def normalize_columns(data, columns):
    """
    Normalize specified numerical columns to have a mean of 0 and a standard deviation of 1.

    Args:
        data (pd.DataFrame): DataFrame containing the data.
        columns (list): List of column names to normalize.

    Returns:
        pd.DataFrame: DataFrame with normalized columns.
    """
    logging.info("Normalizing specified columns to mean=0 and std=1...")
    try:
        data = data.copy()
        for col in columns:
            if col in data.columns:
                mean = data[col].mean()
                std = data[col].std()
                data[col] = (data[col] - mean) / std
                logging.info(f"Column '{col}' normalized successfully.")
            else:
                logging.warning(f"Column '{col}' not found in the data.")
        return data
    except Exception as e:
        logging.error(f"Error during column normalization: {e}")
        raise

def standardize_columns(data, columns):
    """
    Standardize specified numerical columns to have a min-max range of 0 to 1.

    Args:
        data (pd.DataFrame): DataFrame containing the data.
        columns (list): List of column names to standardize.

    Returns:
        pd.DataFrame: DataFrame with standardized columns.
    """
    logging.info("Standardizing specified columns to range 0-1...")
    try:
        data = data.copy()
        for col in columns:
            if col in data.columns:
                min_val = data[col].min()
                max_val = data[col].max()
                data[col] = (data[col] - min_val) / (max_val - min_val)
                logging.info(f"Column '{col}' standardized successfully.")
            else:
                logging.warning(f"Column '{col}' not found in the data.")
        return data
    except Exception as e:
        logging.error(f"Error during column standardization: {e}")
        raise

def remove_outliers(data, columns, threshold=3):
    """
    Remove outliers in specified numerical columns using a Z-score threshold.

    Args:
        data (pd.DataFrame): DataFrame containing the data.
        columns (list): List of column names to check for outliers.
        threshold (float): Z-score threshold to identify outliers (default=3).

    Returns:
        pd.DataFrame: DataFrame with outliers removed.
    """
    logging.info(f"Removing outliers using Z-score threshold of {threshold}...")
    try:
        data = data.copy()
        for col in columns:
            if col in data.columns:
                mean = data[col].mean()
                std = data[col].std()
                z_scores = (data[col] - mean) / std
                data = data[abs(z_scores) <= threshold]
                logging.info(f"Outliers removed from column '{col}'.")
            else:
                logging.warning(f"Column '{col}' not found in the data.")
        return data
    except Exception as e:
        logging.error(f"Error during outlier removal: {e}")
        raise

def compute_summary_statistics(data, columns):
    """
    Compute summary statistics (mean, median, std, min, max) for specified numerical columns.

    Args:
        data (pd.DataFrame): DataFrame containing the data.
        columns (list): List of column names to compute statistics for.

    Returns:
        pd.DataFrame: DataFrame with computed summary statistics.
    """
    logging.info("Computing summary statistics...")
    try:
        stats = data[columns].describe().transpose()
        logging.info("Summary statistics computed successfully.")
        return stats
    except Exception as e:
        logging.error(f"Error computing summary statistics: {e}")
        raise

def fill_missing_values(data, columns, strategy="mean"):
    """
    Fill missing values in specified columns using a chosen strategy (mean, median, or mode).

    Args:
        data (pd.DataFrame): DataFrame containing the data.
        columns (list): List of column names to fill missing values.
        strategy (str): Strategy to fill missing values ("mean", "median", "mode").

    Returns:
        pd.DataFrame: DataFrame with missing values filled.
    """
    logging.info(f"Filling missing values using strategy: {strategy}")
    try:
        data = data.copy()
        for col in columns:
            if col in data.columns:
                if strategy == "mean":
                    data[col].fillna(data[col].mean(), inplace=True)
                elif strategy == "median":
                    data[col].fillna(data[col].median(), inplace=True)
                elif strategy == "mode":
                    data[col].fillna(data[col].mode()[0], inplace=True)
                logging.info(f"Missing values filled for column '{col}' using {strategy} strategy.")
            else:
                logging.warning(f"Column '{col}' not found in the data.")
        return data
    except Exception as e:
        logging.error(f"Error filling missing values: {e}")
        raise

def detect_constant_columns(data):
    """
    Detect columns with a constant value across all rows.
    Args:

        data (pd.DataFrame): DataFrame containing the data.
    Returns:

        list: List of column names that have a constant value.
    """
    logging.info("Detecting constant columns...")
    try:
        constant_cols = [col for col in data.columns if data[col].nunique() == 1]
        logging.info(f"Constant columns found: {constant_cols}")
        return constant_cols
    except Exception as e:
        logging.error(f"Error detecting constant columns: {e}")
        raise

